#include <iostream>
#include <array>
#include <vector>
#include <stdint.h>
#include "sdl_config.h"

using namespace std;

class Monster8 {
public:
    Monster8();
    void loadROM(const char* filename); // Load game ROM into memory
    void emulateCycle();

    uint8_t Locate(uint8_t x, uint8_t y);
    void ClearScreen();
    uint8_t PrintString(uint32_t addr);
    void WriteString(uint32_t addr, const char* str);
    void Flip();

    // screen is now 64000 bytes 320x200x256 RGB colors
    // from 64000 to 64767 is colors palette 0 (default)
    // from 64768 to 65535 is colors palette 1
    array<uint8_t, 65536> screen;
    uint8_t border;
    uint8_t pen;
    uint8_t paper;
    uint8_t joystick;
    bool drawFlag;
    Mix_Music* music = nullptr;
    Mix_Chunk *sound = nullptr;
    bool halted = false;

private:
    array<uint8_t, 0x01000000> memory; // memory is now 24 bits
    array<uint8_t, 0x01000000> sprites;
    array<uint8_t, 0x01000000> tilesets;
    array<uint8_t, 0x01000000> audio1; // for sounds
    array<uint8_t, 0x01000000> audio2; // for music(s)
    array<uint32_t, 8> A;

    const int FlagS = 7; // sign flag
    const int FlagZ = 6; // zero flag
    const int FlagH = 4; // half-carry flag
    const int FlagPV = 2; // Parity/Overflow flag
    const int FlagN = 1; // Substract flag
    const int FlagC = 0; // Carry flag
    // bit 3 & 5 unused

    // D7 => Flags
    array<uint8_t, 8> D;
    
    array<uint32_t, 0x00004000> stack;
    
    uint8_t opcode;
    uint32_t SP;

    uint8_t delay_timer;
    uint8_t sound_timer;

    uint32_t PC;

    uint8_t cursorX;
    uint8_t cursorY;

    // 8x8 VGA font, ASCII 0x00-0x7F (public domain)
    const uint8_t fontset[128][8] = {
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0000 (nul)
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0001
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0002
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0003
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0004
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0005
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0006
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0007
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0008
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0009
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+000A
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+000B
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+000C
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+000D
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+000E
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+000F
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0010
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0011
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0012
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0013
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0014
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0015
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0016
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0017
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0018
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0019
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+001A
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+001B
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+001C
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+001D
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+001E
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+001F
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0020 (space)
        { 0x18,0x3C,0x3C,0x18,0x18,0x00,0x18,0x00 }, // U+0021 (!)
        { 0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+0022 (")
        { 0x36,0x36,0x7F,0x36,0x7F,0x36,0x36,0x00 }, // U+0023 (#)
        { 0x0C,0x3E,0x03,0x1E,0x30,0x1F,0x0C,0x00 }, // U+0024 ($)
        { 0x00,0x63,0x33,0x18,0x0C,0x66,0x63,0x00 }, // U+0025 (%)
        { 0x1C,0x36,0x1C,0x6E,0x3B,0x33,0x6E,0x00 }, // U+0026 (&)
        { 0x06,0x06,0x03,0x00,0x00,0x00,0x00,0x00 }, // U+0027 (')
        { 0x18,0x0C,0x06,0x06,0x06,0x0C,0x18,0x00 }, // U+0028 (()
        { 0x06,0x0C,0x18,0x18,0x18,0x0C,0x06,0x00 }, // U+0029 ())
        { 0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00 }, // U+002A (*)
        { 0x00,0x0C,0x0C,0x3F,0x0C,0x0C,0x00,0x00 }, // U+002B (+)
        { 0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x06 }, // U+002C (,)
        { 0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00 }, // U+002D (-)
        { 0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x00 }, // U+002E (.)
        { 0x60,0x30,0x18,0x0C,0x06,0x03,0x01,0x00 }, // U+002F (/)
        { 0x3E,0x63,0x73,0x7B,0x6F,0x67,0x3E,0x00 }, // U+0030 (0)
        { 0x0C,0x0E,0x0C,0x0C,0x0C,0x0C,0x3F,0x00 }, // U+0031 (1)
        { 0x1E,0x33,0x30,0x1C,0x06,0x33,0x3F,0x00 }, // U+0032 (2)
        { 0x1E,0x33,0x30,0x1C,0x30,0x33,0x1E,0x00 }, // U+0033 (3)
        { 0x38,0x3C,0x36,0x33,0x7F,0x30,0x78,0x00 }, // U+0034 (4)
        { 0x3F,0x03,0x1F,0x30,0x30,0x33,0x1E,0x00 }, // U+0035 (5)
        { 0x1C,0x06,0x03,0x1F,0x33,0x33,0x1E,0x00 }, // U+0036 (6)
        { 0x3F,0x33,0x30,0x18,0x0C,0x0C,0x0C,0x00 }, // U+0037 (7)
        { 0x1E,0x33,0x33,0x1E,0x33,0x33,0x1E,0x00 }, // U+0038 (8)
        { 0x1E,0x33,0x33,0x3E,0x30,0x18,0x0E,0x00 }, // U+0039 (9)
        { 0x00,0x0C,0x0C,0x00,0x00,0x0C,0x0C,0x00 }, // U+003A (:)
        { 0x00,0x0C,0x0C,0x00,0x00,0x0C,0x0C,0x06 }, // U+003B (;)
        { 0x18,0x0C,0x06,0x03,0x06,0x0C,0x18,0x00 }, // U+003C (<)
        { 0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,0x00 }, // U+003D (=)
        { 0x06,0x0C,0x18,0x30,0x18,0x0C,0x06,0x00 }, // U+003E (>)
        { 0x1E,0x33,0x30,0x18,0x0C,0x00,0x0C,0x00 }, // U+003F (?)
        { 0x3E,0x63,0x7B,0x7B,0x7B,0x03,0x1E,0x00 }, // U+0040 (@)
        { 0x0C,0x1E,0x33,0x33,0x3F,0x33,0x33,0x00 }, // U+0041 (A)
        { 0x3F,0x66,0x66,0x3E,0x66,0x66,0x3F,0x00 }, // U+0042 (B)
        { 0x3C,0x66,0x03,0x03,0x03,0x66,0x3C,0x00 }, // U+0043 (C)
        { 0x1F,0x36,0x66,0x66,0x66,0x36,0x1F,0x00 }, // U+0044 (D)
        { 0x7F,0x46,0x16,0x1E,0x16,0x46,0x7F,0x00 }, // U+0045 (E)
        { 0x7F,0x46,0x16,0x1E,0x16,0x06,0x0F,0x00 }, // U+0046 (F)
        { 0x3C,0x66,0x03,0x03,0x73,0x66,0x7C,0x00 }, // U+0047 (G)
        { 0x33,0x33,0x33,0x3F,0x33,0x33,0x33,0x00 }, // U+0048 (H)
        { 0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,0x1E,0x00 }, // U+0049 (I)
        { 0x78,0x30,0x30,0x30,0x33,0x33,0x1E,0x00 }, // U+004A (J)
        { 0x67,0x66,0x36,0x1E,0x36,0x66,0x67,0x00 }, // U+004B (K)
        { 0x0F,0x06,0x06,0x06,0x46,0x66,0x7F,0x00 }, // U+004C (L)
        { 0x63,0x77,0x7F,0x7F,0x6B,0x63,0x63,0x00 }, // U+004D (M)
        { 0x63,0x67,0x6F,0x7B,0x73,0x63,0x63,0x00 }, // U+004E (N)
        { 0x1C,0x36,0x63,0x63,0x63,0x36,0x1C,0x00 }, // U+004F (O)
        { 0x3F,0x66,0x66,0x3E,0x06,0x06,0x0F,0x00 }, // U+0050 (P)
        { 0x1E,0x33,0x33,0x33,0x3B,0x1E,0x38,0x00 }, // U+0051 (Q)
        { 0x3F,0x66,0x66,0x3E,0x36,0x66,0x67,0x00 }, // U+0052 (R)
        { 0x1E,0x33,0x07,0x0E,0x38,0x33,0x1E,0x00 }, // U+0053 (S)
        { 0x3F,0x2D,0x0C,0x0C,0x0C,0x0C,0x1E,0x00 }, // U+0054 (T)
        { 0x33,0x33,0x33,0x33,0x33,0x33,0x3F,0x00 }, // U+0055 (U)
        { 0x33,0x33,0x33,0x33,0x33,0x1E,0x0C,0x00 }, // U+0056 (V)
        { 0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x00 }, // U+0057 (W)
        { 0x63,0x63,0x36,0x1C,0x1C,0x36,0x63,0x00 }, // U+0058 (X)
        { 0x33,0x33,0x33,0x1E,0x0C,0x0C,0x1E,0x00 }, // U+0059 (Y)
        { 0x7F,0x63,0x31,0x18,0x4C,0x66,0x7F,0x00 }, // U+005A (Z)
        { 0x1E,0x06,0x06,0x06,0x06,0x06,0x1E,0x00 }, // U+005B ([)
        { 0x03,0x06,0x0C,0x18,0x30,0x60,0x40,0x00 }, // U+005C (\)
        { 0x1E,0x18,0x18,0x18,0x18,0x18,0x1E,0x00 }, // U+005D (])
        { 0x08,0x1C,0x36,0x63,0x00,0x00,0x00,0x00 }, // U+005E (^
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF }, // U+005F (_)
        { 0x0C,0x0C,0x18,0x00,0x00,0x00,0x00,0x00 }, // U+0060 (`)
        { 0x00,0x00,0x1E,0x30,0x3E,0x33,0x6E,0x00 }, // U+0061 (a)
        { 0x07,0x06,0x06,0x3E,0x66,0x66,0x3B,0x00 }, // U+0062 (b)
        { 0x00,0x00,0x1E,0x33,0x03,0x33,0x1E,0x00 }, // U+0063 (c)
        { 0x38,0x30,0x30,0x3E,0x33,0x33,0x6E,0x00 }, // U+0064 (d)
        { 0x00,0x00,0x1E,0x33,0x3F,0x03,0x1E,0x00 }, // U+0065 (e)
        { 0x1C,0x36,0x06,0x0F,0x06,0x06,0x0F,0x00 }, // U+0066 (f)
        { 0x00,0x00,0x6E,0x33,0x33,0x3E,0x30,0x1F }, // U+0067 (g)
        { 0x07,0x06,0x36,0x6E,0x66,0x66,0x67,0x00 }, // U+0068 (h)
        { 0x0C,0x00,0x0E,0x0C,0x0C,0x0C,0x1E,0x00 }, // U+0069 (i)
        { 0x30,0x00,0x30,0x30,0x30,0x33,0x33,0x1E }, // U+006A (j)
        { 0x07,0x06,0x66,0x36,0x1E,0x36,0x67,0x00 }, // U+006B (k)
        { 0x0E,0x0C,0x0C,0x0C,0x0C,0x0C,0x1E,0x00 }, // U+006C (l)
        { 0x00,0x00,0x33,0x7F,0x7F,0x6B,0x63,0x00 }, // U+006D (m)
        { 0x00,0x00,0x1F,0x33,0x33,0x33,0x33,0x00 }, // U+006E (n)
        { 0x00,0x00,0x1E,0x33,0x33,0x33,0x1E,0x00 }, // U+006F (o)
        { 0x00,0x00,0x3B,0x66,0x66,0x3E,0x06,0x0F }, // U+0070 (p)
        { 0x00,0x00,0x6E,0x33,0x33,0x3E,0x30,0x78 }, // U+0071 (q)
        { 0x00,0x00,0x3B,0x6E,0x66,0x06,0x0F,0x00 }, // U+0072 (r)
        { 0x00,0x00,0x3E,0x03,0x1E,0x30,0x1F,0x00 }, // U+0073 (s)
        { 0x08,0x0C,0x3E,0x0C,0x0C,0x2C,0x18,0x00 }, // U+0074 (t)
        { 0x00,0x00,0x33,0x33,0x33,0x33,0x6E,0x00 }, // U+0075 (u)
        { 0x00,0x00,0x33,0x33,0x33,0x1E,0x0C,0x00 }, // U+0076 (v)
        { 0x00,0x00,0x63,0x6B,0x7F,0x7F,0x36,0x00 }, // U+0077 (w)
        { 0x00,0x00,0x63,0x36,0x1C,0x36,0x63,0x00 }, // U+0078 (x)
        { 0x00,0x00,0x33,0x33,0x33,0x3E,0x30,0x1F }, // U+0079 (y)
        { 0x00,0x00,0x3F,0x19,0x0C,0x26,0x3F,0x00 }, // U+007A (z)
        { 0x38,0x0C,0x0C,0x07,0x0C,0x0C,0x38,0x00 }, // U+007B ({)
        { 0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x00 }, // U+007C (|)
        { 0x07,0x0C,0x0C,0x38,0x0C,0x0C,0x07,0x00 }, // U+007D (})
        { 0x6E,0x3B,0x00,0x00,0x00,0x00,0x00,0x00 }, // U+007E (~)
        { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }  // U+007F
    };

    void initialize(); // Reset emulator state
    uint8_t getOpcode();
    void DrawSprite(uint32_t x, uint32_t y, uint8_t w, uint8_t h, uint32_t addr);
    void DrawBlock(uint32_t x, uint32_t y, uint8_t w, uint8_t h, uint32_t addr);
    void GrabBlock(uint32_t x, uint32_t y, uint8_t w, uint8_t h, uint32_t addr);
    uint8_t GetPixel(uint8_t x, uint8_t y);
    uint8_t getJoystickState();
    void PlaySound(uint32_t addr, uint32_t length);
    void PlayMusic(uint32_t addr, uint32_t length);
    void StopMusic();
    uint8_t PrintChar(char c);
    void SetPixel(uint32_t x, uint32_t y, uint8_t c);
    uint8_t GetPixel(uint32_t x, uint32_t y);
    void ScrollScreen(uint8_t scrollX, uint8_t scrollY);
    uint8_t GetFlagsValue(uint32_t v1, uint32_t v2, string v3);

};
